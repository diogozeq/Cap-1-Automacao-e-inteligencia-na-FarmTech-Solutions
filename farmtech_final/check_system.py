#!/usr/bin/env python3
"""
check_system.py
Script para verificar se o sistema FarmTech ERP est√° pronto para execu√ß√£o
"""

import sys
import os
from pathlib import Path

def check_python():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando Python...")
    print(f"   Vers√£o: {sys.version}")
    print(f"   Execut√°vel: {sys.executable}")
    
    if sys.version_info < (3, 8):
        print("   ‚ùå Python 3.8 ou superior √© necess√°rio")
        return False
    else:
        print("   ‚úÖ Vers√£o do Python OK")
        return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    print("\nüì¶ Verificando depend√™ncias...")
    
    dependencies = [
        'streamlit',
        'pandas', 
        'numpy',
        'plotly',
        'sqlalchemy'
    ]
    
    missing = []
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"   ‚úÖ {dep}")
        except ImportError:
            print(f"   ‚ùå {dep} - N√ÉO INSTALADO")
            missing.append(dep)
    
    if missing:
        print(f"\n‚ùå Depend√™ncias ausentes: {', '.join(missing)}")
        print("üí° Para instalar: pip install " + " ".join(missing))
        return False
    else:
        print("\n‚úÖ Todas as depend√™ncias est√£o instaladas")
        return True

def check_project_structure():
    """Verifica a estrutura do projeto"""
    print("\nüìÅ Verificando estrutura do projeto...")
    
    required_files = [
        'backend/db_manager.py',
        'backend/services.py',
        'backend/ml_predictor.py',
        'backend/wokwi_listener.py',
        'dashboard/main_erp.py',
        'run_erp.py'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - N√ÉO ENCONTRADO")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå Arquivos ausentes: {', '.join(missing_files)}")
        return False
    else:
        print("\n‚úÖ Estrutura do projeto OK")
        return True

def check_backend_modules():
    """Verifica se os m√≥dulos do backend funcionam"""
    print("\nüîß Verificando m√≥dulos do backend...")
    
    try:
        sys.path.insert(0, 'backend')
        
        # Testar imports
        from backend import db_manager, services
        print("   ‚úÖ Imports do backend OK")
        
        # Testar inicializa√ß√£o do banco
        db_manager.init_db()
        print("   ‚úÖ Banco de dados inicializado")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro nos m√≥dulos do backend: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üå± FarmTech ERP - Verifica√ß√£o do Sistema")
    print("=" * 50)
    
    checks = [
        check_python(),
        check_dependencies(),
        check_project_structure(),
        check_backend_modules()
    ]
    
    print("\n" + "=" * 50)
    
    if all(checks):
        print("üéâ SISTEMA PRONTO PARA EXECU√á√ÉO!")
        print("üí° Execute: python run_erp.py")
    else:
        print("‚ùå SISTEMA N√ÉO EST√Å PRONTO")
        print("üí° Corrija os problemas acima antes de executar")
    
    print("=" * 50)

if __name__ == "__main__":
    main()